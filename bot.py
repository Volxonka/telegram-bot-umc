import logging
import os
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN, GROUPS, CURATORS, GROUPS_LEGACY, ADMIN_ID, load_faculties, load_groups, load_curators, save_faculties, save_groups, save_curators
from webapp_config import get_webapp_url, get_webapp_info
from database import Database
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

def get_group_name(group_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ ID"""
    groups = load_groups()
    return groups.get(group_id, {}).get("name", group_id)

def clear_conversation_state(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    for key in (
        "waiting_for",
        "target_group",
        "target_question",
        "import_group",
        "edit_student_group",
        "edit_student_old",
        "poll_absent_id",
        "poll_absent_user",
        "poll_group",
        "poll_curator",
    ):
        try:
            context.user_data.pop(key, None)
        except Exception:
            pass

def with_home_button(keyboard, group: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        for row in keyboard:
            for btn in row:
                if isinstance(btn, InlineKeyboardButton) and (btn.text.startswith("üîô ") or btn.text.startswith("üè† ")):
                    return InlineKeyboardMarkup(keyboard)
    except Exception:
        pass
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"back_to_menu_{group}")])
    return InlineKeyboardMarkup(keyboard)

async def open_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    user_group = db.get_user_group(user_id)
    
    if not user_group:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–µ!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."
        )
        return
    
    # Get web app URL from configuration
    webapp_url = get_webapp_url("main")
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=get_webapp_info())]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –£–ú–¶!**\n\n"
        "‚ú® **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ üé® –ö—Ä–∞—Å–∏–≤—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è\n"
        "‚Ä¢ üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
        "‚Ä¢ üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    username = query.from_user.username or "Unknown"
    first_name = query.from_user.first_name or ""
    last_name = query.from_user.last_name or ""
    group = query.data.replace("webapp_", "")
    user_group = db.get_user_group(user_id)
    
    if not user_group or user_group != group:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = db.users.get(str(user_id), {})
    full_name = user_data.get("full_name", f"{first_name} {last_name}".strip())
    is_curator = db.is_curator(user_id, group)
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    webapp_url = get_webapp_url("main")
    
    # –°–æ–∑–¥–∞–µ–º WebAppInfo —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    import urllib.parse
    encoded_full_name = urllib.parse.quote(full_name)
    webapp_info = WebAppInfo(
        url=f"{webapp_url}?user_id={user_id}&group={group}&username={username}&full_name={encoded_full_name}&is_curator={is_curator}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webapp_info)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"back_to_menu_{group}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    groups = load_groups()
    group_name = groups.get(group, {}).get("name", group)
    is_curator = db.is_curator(user_id, group)
    
    role_text = "–∫—É—Ä–∞—Ç–æ—Ä–∞" if is_curator else "—Å—Ç—É–¥–µ–Ω—Ç–∞"
    
    await query.edit_message_text(
        f"üéâ **–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –£–ú–¶ –¥–ª—è {role_text} –≥—Ä—É–ø–ø—ã {group_name}**\n\n"
        "‚ú® **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ üé® –ö—Ä–∞—Å–∏–≤—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏\n"
        "‚Ä¢ üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
        "‚Ä¢ üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ üé≠ –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã\n"
        "‚Ä¢ üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    # Check if user wants to open web app
    if context.args and context.args[0] == 'webapp':
        await open_webapp(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_group = db.get_user_group(user_id)
    
    if user_group:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        groups = load_groups()
        group_name = groups.get(user_group, {}).get("name", user_group)
        await update.message.reply_text(
            f"üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!**\n\n"
            f"üë• **–í–∞—à–∞ –≥—Ä—É–ø–ø–∞:** {group_name}\n"
            f"‚úÖ **–°—Ç–∞—Ç—É—Å:** –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ: ‚¨áÔ∏è"
        )
        await show_main_menu(update, context, user_group)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        await show_group_selection(update, context)

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id == ADMIN_ID:
        await show_admin_panel(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø—ã
    curators = load_curators()
    curator_groups = []
    for group, curator_ids in curators.items():
        if user_id in curator_ids:
            curator_groups.append(group)
    
    if curator_groups:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º
        if len(curator_groups) == 1:
            group = curator_groups[0]
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            db.update_user_rights(user_id, username, group, True)
            await show_main_menu(update, context, group)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø
            groups = load_groups()
            group_names = [groups[g]["name"] for g in curator_groups]
            await update.message.reply_text(
                f"–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø: {', '.join(group_names)}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."
            )
    else:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
        )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if str(user_id) in db.users:
        del db.users[str(user_id)]
        db.save_users()
        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –£–ú–¶**

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/admin` - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/reset` - —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `/today` - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

üéØ **–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:**
‚Ä¢ üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
‚Ä¢ üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è - —á—Ç–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ ‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫—É—Ä–∞—Ç–æ—Ä—É
‚Ä¢ üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É - –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É

üë®‚Äçüè´ **–î–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤:**
‚Ä¢ üìÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
‚Ä¢ üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ ‚ùì –í–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ - –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä—É
‚Ä¢ –û—Ç–≤–µ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üÜò **–ü—Ä–æ–±–ª–µ–º—ã?** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    user_group = db.get_user_group(user_id)

    if user_group:
        await show_main_menu(update, context, user_group)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–æ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞
    curator_groups = [g for g, ids in CURATORS.items() if user_id in ids]
    if len(curator_groups) == 1:
        group = curator_groups[0]
        db.update_user_rights(user_id, username, group, True)
        await show_main_menu(update, context, group)
        return
    elif len(curator_groups) > 1:
        await update.message.reply_text(
            "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
        await show_group_selection(update, context)
        return

    await show_group_selection(update, context)

async def resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω"""
    user_id = update.effective_user.id
    last_screen = db.get_last_screen(user_id)
    if not last_screen:
        await menu(update, context)
        return
    parts = last_screen.split("_", 1)
    if len(parts) != 2:
        await menu(update, context)
        return
    screen, rest = parts[0], parts[1]
    group = rest
    if screen == "menu":
        await show_main_menu(update, context, group)
    elif screen == "today":
        # today_schedule —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ message-path
        await today_schedule(update, context)
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        await show_main_menu(update, context, group)

async def today_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        group = query.data.replace("today_schedule_", "")
        user_group = group
        is_callback = True
    else:
        user_id = update.effective_user.id
        user_group = db.get_user_group(user_id)
        is_callback = False
    
    if not user_group:
        if is_callback:
            await query.edit_message_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
        else:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω
    try:
        db.set_last_screen(user_id, f"today_{user_group}")
    except Exception:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    group_messages = db.messages.get(user_group, [])
    schedule_messages = [m for m in group_messages if m['type'] == 'schedule']
    
    if not schedule_messages:
        groups = load_groups()
        group_name = groups.get(user_group, {}).get("name", user_group)
        text = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.**\n\n"
        text += "üí° –ö—É—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Å–∞–º–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ)
        latest_schedule = schedule_messages[-1]
        text = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è**\n"
        text += f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        text += f"{latest_schedule['content']}\n\n"
        text += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {latest_schedule['timestamp']}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üìÖ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data=f"view_schedule_{user_group}")]
    ]
    reply_markup = with_home_button(keyboard, user_group)
    
    if is_callback:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_group_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    welcome_text = """üéì **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ "–£–ú–¶"!**

üìö **–£–ú–¶** - —ç—Ç–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ú–∏—Ä–æ–≤—ã—Ö –¶–∏–≤–∏–ª–∏–∑–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—É—á–∞—Ç—å—Å—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.

üîπ **–î–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ (—Å—Ç–∞—Ä–æ—Å—Ç):**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã
‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∂–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üîπ **–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ß—Ç–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –£–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    groups = load_groups()
    faculties = load_faculties()
    
    keyboard = []
    current_faculty = None
    
    for group_key, group_data in groups.items():
        faculty_id = group_data.get("faculty", "")
        faculty_name = faculties.get(faculty_id, {}).get("name", faculty_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if current_faculty != faculty_id:
            if current_faculty is not None:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–µ
                keyboard.append([])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏
            current_faculty = faculty_id
        
        group_name = group_data.get("name", group_key)
        keyboard.append([InlineKeyboardButton(f"{group_name} ({faculty_name})", callback_data=f"join_{group_key}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_group_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    username = query.from_user.username or "Unknown"
    
    if query.data.startswith("join_"):
        group = query.data.replace("join_", "")
        groups = load_groups()
        group_name = groups.get(group, {}).get("name", group)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º
        if db.is_curator(user_id, group):
            # –ö—É—Ä–∞—Ç–æ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –§–ò–û
            db.add_user(user_id, username, group)
            await query.edit_message_text(
                f"üéâ **–ö—Ä—É—Ç–æ! –¢–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏!** üéâ\n\n"
                f"üë®‚Äçüè´ **–†–æ–ª—å:** –ö—É—Ä–∞—Ç–æ—Ä\n"
                f"üë• **–ì—Ä—É–ø–ø–∞:** {group_name}\n\n"
                f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n"
                f"‚Ä¢ üìÖ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                f"‚Ä¢ üì¢ –î–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                f"‚Ä¢ üó≥ –°–æ–∑–¥–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n"
                f"‚Ä¢ üë• –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏\n"
                f"‚Ä¢ ‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                f"**–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:** ‚¨áÔ∏è"
            )
            await show_main_menu(update, context, group)
        else:
            # –î–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            context.user_data['waiting_for_full_name'] = True
            context.user_data['full_name_group'] = group
            context.user_data['registration_username'] = username
            await query.edit_message_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É {group_name}!\n\n"
                "üìù –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
            )

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id if update.effective_user else update.callback_query.from_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    clear_conversation_state(context)
    
    text = """üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    keyboard = [
        [InlineKeyboardButton("üèõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏", callback_data="admin_faculties")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏", callback_data="admin_groups")],
        [InlineKeyboardButton("üë®‚Äçüè´ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="admin_curators")],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data="admin_change_student_group")],
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("‚ùì –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="admin_questions")],
        [InlineKeyboardButton("üì¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_messages")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, group: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    user_id = update.effective_user.id if update.effective_user else update.callback_query.from_user.id
    
    # –û—á–∏—â–∞–µ–º –∑–∞–ª–∏–ø—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    context.user_data.pop("waiting_for", None)
    context.user_data.pop("target_group", None)
    context.user_data.pop("target_question", None)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω
    try:
        db.set_last_screen(user_id, f"menu_{group}")
    except Exception:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º
    is_curator = db.is_curator(user_id, group)
    
    if is_curator:
        # –ú–µ–Ω—é –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üìÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"schedule_{group}")],
            [InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=f"announce_{group}")],
            [InlineKeyboardButton("üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data=f"polls_menu_{group}")],
            [InlineKeyboardButton("üë• –°—Ç—É–¥–µ–Ω—Ç—ã", callback_data=f"students_menu_{group}")],
            [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data=f"view_questions_{group}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã", callback_data=f"stats_{group}")],
            [InlineKeyboardButton("üöÄ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"webapp_{group}")],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group")]
        ]
        groups = load_groups()
        group_name = groups.get(group, {}).get("name", group)
        title = f"üë®‚Äçüè´ –ú–µ–Ω—é –∫—É—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã {group_name}"
    else:
        # –ú–µ–Ω—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"view_schedule_{group}")],
            [InlineKeyboardButton("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=f"view_announce_{group}")],
            [InlineKeyboardButton("üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data=f"student_polls_{group}")],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"ask_question_{group}")],
            [InlineKeyboardButton("üöÄ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"webapp_{group}")]
        ]
        groups = load_groups()
        group_name = groups.get(group, {}).get("name", group)
        title = f"üë®‚Äçüéì –ú–µ–Ω—é –≥—Ä—É–ø–ø—ã {group_name}"
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(title, reply_markup=reply_markup)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await context.bot.send_message(
                chat_id=update.callback_query.from_user.id,
                text=title,
                reply_markup=reply_markup
            )
    else:
        try:
            await update.message.reply_text(title, reply_markup=reply_markup)
        except Exception:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∞ —Å–ª—É—á–∞–π —Ç–∞–π–º–∞—É—Ç–∞
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=title,
                reply_markup=reply_markup
            )

async def handle_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("schedule_", "")
    user_id = query.from_user.id
    groups = load_groups()
    group_name = groups.get(group, {}).get("name", group)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    if not db.is_curator(user_id, group):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    clear_conversation_state(context)
    context.user_data["waiting_for"] = f"schedule_{group}"
    context.user_data["target_group"] = group
    
    await query.edit_message_text(
        f"üìÖ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}**\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        f"‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–º\n"
        f"‚Ä¢ üì∑ –§–æ—Ç–æ\n"
        f"‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç (PDF/JPG/PNG)\n\n"
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≤ –º–µ–Ω—é."
    )

async def handle_announcement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("announce_", "")
    user_id = query.from_user.id
    groups = load_groups()
    group_name = groups.get(group, {}).get("name", group)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    if not db.is_curator(user_id, group):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    clear_conversation_state(context)
    context.user_data["waiting_for"] = f"announce_{group}"
    context.user_data["target_group"] = group
    
    await query.edit_message_text(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}.\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (pdf/jpg/png)."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not context.user_data.get("waiting_for"):
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        user_group = db.get_user_group(user_id)

        if user_group:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã {user_group}")
            await show_main_menu(update, context, user_group)
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∫—É—Ä–∞—Ç–æ—Ä–æ–º
        curators = load_curators()
        curator_groups = [g for g, ids in curators.items() if user_id in ids]
        if len(curator_groups) == 1:
            # –ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∫—É—Ä–∞—Ç–æ—Ä–∞
            group = curator_groups[0]
            db.update_user_rights(user_id, username, group, True)
            await show_main_menu(update, context, group)
            return
        elif len(curator_groups) > 1:
            # –ö—É—Ä–∞—Ç–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É
            await update.message.reply_text(
                "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
            await show_group_selection(update, context)
            return

        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É
        await show_group_selection(update, context)
        return
    
    user_id = update.effective_user.id
    waiting_for = context.user_data["waiting_for"]
    target_group = context.user_data["target_group"]
    groups = load_groups()
    group_name = groups.get(target_group, {}).get("name", target_group)

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞
    has_photo = bool(update.message.photo)
    has_document = bool(update.message.document)
    text = update.message.caption if (has_photo or has_document) else update.message.text
    
    if waiting_for.startswith("schedule_"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if not db.is_curator(user_id, target_group):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É!")
            return
        
        # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º
        if has_photo:
            file_id = update.message.photo[-1].file_id
            db.add_message(target_group, "schedule", text or "[—Ñ–æ—Ç–æ]", user_id, file_id, "photo")
            content_type = "—Ñ–æ—Ç–æ"
        elif has_document:
            file_id = update.message.document.file_id
            db.add_message(target_group, "schedule", text or "[–¥–æ–∫—É–º–µ–Ω—Ç]", user_id, file_id, "document")
            content_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
        else:
            db.add_message(target_group, "schedule", text or "", user_id)
            content_type = "—Ç–µ–∫—Å—Ç"
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop("waiting_for", None)
        context.user_data.pop("target_group", None)
        
        await update.message.reply_text(
            f"‚úÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!**\n\n"
            f"üìÖ –ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üìù –¢–∏–ø: {content_type}\n\n"
            f"–°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –º–µ–Ω—é \"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\""
        )
        
    elif waiting_for.startswith("announce_"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if not db.is_curator(user_id, target_group):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É!")
            return
        
        if has_photo:
            file_id = update.message.photo[-1].file_id
            sent_count = await send_to_group_media(context, target_group, media_type="photo", file_id=file_id, caption=(text or ""), title_prefix="üì¢ –ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï")
            db.add_message(target_group, "announcement", text or "[—Ñ–æ—Ç–æ]", user_id)
        elif has_document:
            file_id = update.message.document.file_id
            sent_count = await send_to_group_media(context, target_group, media_type="document", file_id=file_id, caption=(text or ""), title_prefix="üì¢ –ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï")
            db.add_message(target_group, "announcement", text or "[–¥–æ–∫—É–º–µ–Ω—Ç]", user_id)
        else:
            sent_count = await send_to_group(update, context, target_group, "üì¢ –ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï", text or "")
            db.add_message(target_group, "announcement", text or "", user_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop("waiting_for", None)
        context.user_data.pop("target_group", None)
        
        await update.message.reply_text(
            f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã {group_name}!\n\n"
            f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã: {sent_count} —Å—Ç—É–¥–µ–Ω—Ç–∞–º"
        )
        
    elif waiting_for.startswith("question_"):
        # –°—Ç—É–¥–µ–Ω—Ç –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
        if has_photo or has_document:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")
            return
        question_id = db.add_question(user_id, target_group, text or "")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop("waiting_for", None)
        context.user_data.pop("target_group", None)
        
        await update.message.reply_text(
            f"‚úÖ –í–æ–ø—Ä–æ—Å #{question_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã {group_name}!\n\n"
            "–ö—É—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
        try:
            from config import CURATORS
            curator_ids = CURATORS.get(target_group, [])
            if curator_ids:
                preview = ((text or "")[:120] + '...') if (text and len(text) > 120) else (text or "")
                notify_text = (
                    f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ {GROUPS[target_group]}\n\n"
                    f"üßë‚Äçüéì ID —Å—Ç—É–¥–µ–Ω—Ç–∞: {user_id}\n"
                    f"#ID{question_id}\n\n"
                    f"–¢–µ–∫—Å—Ç: {preview}"
                )
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_question_{target_group}")]
                ])
                for curator_id in curator_ids:
                    try:
                        await context.bot.send_message(chat_id=curator_id, text=notify_text, reply_markup=reply_markup)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞ {curator_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ 2/6/24 —á–∞—Å–∞, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–≤–µ—á–µ–Ω
        try:
            if context.job_queue:
                for seconds in (2*60*60, 6*60*60, 24*60*60):
                    context.job_queue.run_once(
                        remind_pending_question,
                        when=seconds,
                        data={"group": target_group, "question_id": question_id}
                    )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        
    elif waiting_for.startswith("answer_"):
        # –ö—É—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if has_photo or has_document:
            await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º.")
            return
        parts = waiting_for.split("_")
        question_id = int(parts[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
        if not db.is_curator(user_id, target_group):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!")
            return
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if db.answer_question(target_group, question_id, text or "", user_id):
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–± –æ—Ç–≤–µ—Ç–µ
            question = context.user_data.get("target_question", {})
            if question and "user_id" in question:
                try:
                    await context.bot.send_message(
                        chat_id=question["user_id"],
                        text=(
                            f"üí¨ **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å #{question_id}:**\n\n"
                             f"‚ùì **–í–æ–ø—Ä–æ—Å:** {question['question']}\n\n"
                            f"‚úÖ **–û—Ç–≤–µ—Ç:** {text or ''}\n\n"
                             f"üë®‚Äçüè´ –ì—Ä—É–ø–ø–∞: {GROUPS[target_group]}"
                        )
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É {question['user_id']}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop("waiting_for", None)
            context.user_data.pop("target_group", None)
            context.user_data.pop("target_question", None)
            
            await update.message.reply_text(
                f"‚úÖ **–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—É!**\n\n"
                f"üìù –í–æ–ø—Ä–æ—Å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π."
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω.")

async def send_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE, group: str, title: str, content: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã"""
    users = db.get_group_users(group)
    
    message = f"{title}\n\n{content}\n\nüë• –ì—Ä—É–ø–ø–∞: {get_group_name(group)}"
    
    sent_count = 0
    for user_id in users:
        try:
            await context.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
            sent_count += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    return sent_count

async def send_to_group_media(context: ContextTypes.DEFAULT_TYPE, group: str, media_type: str, file_id: str, caption: str, title_prefix: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã —Å –æ–±—â–µ–π –ø–æ–¥–ø–∏—Å—å—é"""
    users = db.get_group_users(group)
    full_caption = f"{title_prefix}\n\n{caption}\n\nüë• –ì—Ä—É–ø–ø–∞: {get_group_name(group)}" if caption else f"{title_prefix}\n\nüë• –ì—Ä—É–ø–ø–∞: {get_group_name(group)}"
    sent_count = 0
    for user_id in users:
        try:
            if media_type == "photo":
                await context.bot.send_photo(chat_id=user_id, photo=file_id, caption=full_caption)
            elif media_type == "document":
                await context.bot.send_document(chat_id=user_id, document=file_id, caption=full_caption)
            else:
                continue
            sent_count += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {media_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    return sent_count

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("stats_", "")
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return
    
    users = db.get_group_users(group)
    group_messages = db.messages.get(group, [])
    
    stats = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã {get_group_name(group)}**\n\n"
    stats += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(users)}\n"
    stats += f"üìù **–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {len(group_messages)}\n"
    stats += f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–π:** {len([m for m in group_messages if m['type'] == 'schedule'])}\n"
    stats += f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏–π:** {len([m for m in group_messages if m['type'] == 'announcement'])}\n"
    stats += f"‚ùì **–í–æ–ø—Ä–æ—Å–æ–≤:** {len(db.get_all_questions(group))}\n"
    stats += f"‚è≥ **–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞:** {len(db.get_pending_questions(group))}"
    
    keyboard = [
        [InlineKeyboardButton("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"stats_{group}")]
    ]
    reply_markup = with_home_button(keyboard, group)
    
    await query.edit_message_text(stats, reply_markup=reply_markup, parse_mode='Markdown')

async def change_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
    user_id = query.from_user.id
    if str(user_id) in db.users:
        del db.users[str(user_id)]
        db.save_users()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    await show_group_selection(update, context)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("back_to_menu_", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
    user_id = query.from_user.id
    current_group = db.get_user_group(user_id)
    
    if not current_group or current_group != group:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª –≥—Ä—É–ø–ø—É –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        try:
            await query.edit_message_text(
                "‚ùå **–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏**\n\n"
                "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå **–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏**\n\n"
                "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
        return
    
    await show_main_menu(update, context, group)



async def view_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("view_schedule_", "")
    user_id = query.from_user.id
    group_messages = db.messages.get(group, [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω
    try:
        db.set_last_screen(user_id, f"view_schedule_{group}")
    except Exception:
        pass
    
    schedule_messages = [m for m in group_messages if m['type'] == 'schedule']
    
    if not schedule_messages:
        text = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {get_group_name(group)} –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.**\n\n"
        text += "üí° –ö—É—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        
        keyboard = []
        reply_markup = with_home_button(keyboard, group)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        latest_schedule = schedule_messages[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞
        if latest_schedule.get('file_id') and latest_schedule.get('media_type'):
            file_id = latest_schedule['file_id']
            media_type = latest_schedule['media_type']
            caption = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {get_group_name(group)}**\n\n{latest_schedule['content']}\n\nüìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {latest_schedule.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"view_schedule_{group}")]
            ]
            reply_markup = with_home_button(keyboard, group)
            
            if media_type == "photo":
                await context.bot.send_photo(chat_id=query.from_user.id, photo=file_id, caption=caption, reply_markup=reply_markup, parse_mode='Markdown')
            elif media_type == "document":
                await context.bot.send_document(chat_id=query.from_user.id, document=file_id, caption=caption, reply_markup=reply_markup, parse_mode='Markdown')
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.delete_message()
            return
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            text = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {get_group_name(group)}**\n\n"
            text += f"{latest_schedule['content']}\n\n"
            text += f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {latest_schedule.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"view_schedule_{group}")]
            ]
            reply_markup = with_home_button(keyboard, group)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            return

    # –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def view_announcements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("view_announce_", "")
    user_id = query.from_user.id
    group_messages = db.messages.get(group, [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω
    try:
        db.set_last_screen(user_id, f"view_announce_{group}")
    except Exception:
        pass
    
    announce_messages = [m for m in group_messages if m['type'] == 'announcement']
    
    if not announce_messages:
        text = f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {get_group_name(group)} –ø–æ–∫–∞ –Ω–µ—Ç.**\n\n"
        text += "üí° –ö—É—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    else:
        text = f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {get_group_name(group)}**\n\n"
        for i, msg in enumerate(announce_messages[-5:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            text += f"**–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{len(announce_messages) - 5 + i}:**\n"
            text += f"{msg['content']}\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=f"view_announce_{group}")]
    ]
    reply_markup = with_home_button(keyboard, group)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("ask_question_", "")
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    clear_conversation_state(context)
    context.user_data["waiting_for"] = f"question_{group}"
    context.user_data["target_group"] = group

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω
    try:
        db.set_last_screen(user_id, f"ask_question_{group}")
    except Exception:
        pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"cancel_question_{group}")]]
    reply_markup = with_home_button(keyboard, group)
    
    await query.edit_message_text(
        f"‚ùì **–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –≥—Ä—É–ø–ø—ã {get_group_name(group)}**\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –∏ –∫—É—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ.\n\n"
        "üí° –í–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def view_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ (–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ) –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞.

    –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    """
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("view_questions_", "")
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω
    try:
        db.set_last_screen(user_id, f"view_questions_{group}")
    except Exception:
        pass
    
    pending_questions = db.get_pending_questions(group)

    if not pending_questions:
        text = (
            f"‚ùì **–í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {get_group_name(group)} –ø–æ–∫–∞ –Ω–µ—Ç.**\n\n"
            "üí° –ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∑–¥–µ—Å—å."
        )
        keyboard = []
    else:
        text = f"‚ùì **–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≥—Ä—É–ø–ø—ã {get_group_name(group)}**\n\n"
        for q in pending_questions[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö
            preview = (q['question'][:80] + '...') if len(q['question']) > 80 else q['question']
            text += f"‚Ä¢ ‚è≥ –í–æ–ø—Ä–æ—Å #{q['id']}: {preview}\n"
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ \"–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å\", —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É."
        keyboard = [[InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"answer_question_{group}")]]
    
    reply_markup = with_home_button(keyboard, group)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def answer_question_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("answer_question_", "")
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!")
        return
    
    pending_questions = db.get_pending_questions(group)
    
    if not pending_questions:
        await query.edit_message_text(
            f"‚úÖ **–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≥—Ä—É–ø–ø—ã {get_group_name(group)} —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω—ã!**\n\n"
            f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∫—É—Ä–∞—Ç–æ—Ä!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_questions_{group}")
            ]]),
            parse_mode='Markdown'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω
    try:
        db.set_last_screen(user_id, f"answer_question_{group}")
    except Exception:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    text = f"‚ùì **–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞**\n"
    text += f"–ì—Ä—É–ø–ø–∞: {get_group_name(group)}\n\n"
    text += f"üìù **–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:** {len(pending_questions)}\n\n"
    
    keyboard = []
    
    for q in pending_questions[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤
        keyboard.append([
            InlineKeyboardButton(
                f"‚ùì –í–æ–ø—Ä–æ—Å #{q['id']}: {q['question'][:30]}...", 
                callback_data=f"select_question_{group}_{q['id']}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ö –≤–æ–ø—Ä–æ—Å–∞–º", callback_data=f"view_questions_{group}")])
    reply_markup = with_home_button(keyboard, group)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def select_question_for_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–∏—Ä–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –§–æ—Ä–º–∞—Ç: select_question_{group}_{question_id}
    parts = query.data.split("_")
    group = parts[2]
    question_id = int(parts[3])
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
    all_questions = db.get_all_questions(group)
    question = None
    for q in all_questions:
        if q['id'] == question_id and q['status'] == 'pending':
            question = q
            break
    
    if not question:
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    clear_conversation_state(context)
    context.user_data["waiting_for"] = f"answer_{group}_{question_id}"
    context.user_data["target_group"] = group
    context.user_data["target_question"] = question
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"cancel_answer_{group}")]]
    reply_markup = with_home_button(keyboard, group)
    
    await query.edit_message_text(
        f"‚ùì **–í–æ–ø—Ä–æ—Å #{question_id}:**\n\n"
        f"{question['question']}\n\n"
        f"üìù **–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:**\n\n"
        f"üí° –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—É.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –ª–æ–≥–∏—Ä—É–µ–º –º–æ–ª—á–∞, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logger.exception("Unhandled error occurred:", exc_info=context.error)
    # –ù–µ —à–ª—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

async def cancel_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("cancel_question_", "")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("waiting_for", None)
    context.user_data.pop("target_group", None)
    
    await query.edit_message_text(
        f"‚ùå **–í–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
        f"üí° –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=with_home_button([], group),
        parse_mode='Markdown'
    )

async def cancel_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    query = update.callback_query
    await query.answer()
    
    group = query.data.replace("cancel_answer_", "")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("waiting_for", None)
    context.user_data.pop("target_group", None)
    context.user_data.pop("target_question", None)
    
    await query.edit_message_text(
        f"‚ùå **–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
        f"üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
        reply_markup=with_home_button([[InlineKeyboardButton("üîô –ö –≤–æ–ø—Ä–æ—Å–∞–º", callback_data=f"view_questions_{group}")]], group),
        parse_mode='Markdown'
    )

async def remind_pending_question(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞–º, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–≤–µ—á–µ–Ω"""
    try:
        data = context.job.data or {}
        group = data.get("group")
        question_id = data.get("question_id")
        if not group or not question_id:
            return
        question = db.get_question(group, question_id)
        if not question or question.get("status") != "pending":
            return
        from config import CURATORS
        curator_ids = CURATORS.get(group, [])
        if not curator_ids:
            return
        preview = (question.get("question", "")[:120] + '...') if len(question.get("question", "")) > 120 else question.get("question", "")
        notify_text = (
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–æ–ø—Ä–æ—Å #{question_id} –≤—Å–µ –µ—â–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞\n\n"
            f"–ì—Ä—É–ø–ø–∞: {get_group_name(group)}\n"
            f"–¢–µ–∫—Å—Ç: {preview}"
        )
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_question_{group}")]
        ])
        for curator_id in curator_ids:
            try:
                await context.bot.send_message(chat_id=curator_id, text=notify_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É {curator_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏: {e}")

async def import_students_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É: /import_students –∂1"""
    user_id = update.effective_user.id
    args = context.args if hasattr(context, 'args') else []
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /import_students <–≥—Ä—É–ø–ø–∞>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /import_students –∂1")
        return
    group = args[0].lower()
    if group not in GROUPS:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: " + ", ".join(GROUPS.keys()))
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    if not db.is_curator(user_id, group):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
        return
    context.user_data["import_group"] = group
    await update.message.reply_text(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {get_group_name(group)} –æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç. –ù–æ–º–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ –º–æ–∂–Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å."
    )

async def handle_import_students_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /import_students –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    group = context.user_data.get("import_group")
    if not group:
        return False
    text = update.message.text or ""
    added = db.import_students_text(group, text)
    context.user_data.pop("import_group", None)
    await update.message.reply_text(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {added}\n–ì—Ä—É–ø–ø–∞: {get_group_name(group)}")
    return True

async def students_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã –∏ –ø–µ—Ä–≤—ã–µ 15 –§–ò–û: /students –∂1"""
    args = context.args if hasattr(context, 'args') else []
    group = (args[0].lower() if args else db.get_user_group(update.effective_user.id))
    if not group or group not in GROUPS:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /students <–≥—Ä—É–ø–ø–∞>")
        return
    students = db.get_students(group)
    count = len(students)
    preview = "\n".join([f"- {s.get('full_name')}" for s in students[:15]]) if students else "‚Äî"
    await update.message.reply_text(
        f"üë• –°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {get_group_name(group)}: {count}\n\n" + preview
    )

async def students_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    group = query.data.replace("students_menu_", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
        return
    keyboard = [
        [InlineKeyboardButton("‚ûï –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞", callback_data=f"students_import_{group}")],
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"students_list_{group}")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"students_edit_{group}"), InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"students_delete_{group}")]
    ]
    reply_markup = with_home_button(keyboard, group)
    await query.edit_message_text(f"üë• –°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {get_group_name(group)}", reply_markup=reply_markup)

async def students_import_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    group = query.data.replace("students_import_", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    clear_conversation_state(context)
    context.user_data["import_group"] = group
    await query.edit_message_text(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è {get_group_name(group)} –æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç. –ù–æ–º–µ—Ä–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å.")

async def students_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    group = query.data.replace("students_list_", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    students = db.get_students(group)
    count = len(students)
    
    if not students:
        text = f"üë• **–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {get_group_name(group)}**\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    else:
        text = f"üë• **–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {get_group_name(group)}**\n\n"
        text += f"üìä –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {count}\n\n"
        
        for i, student in enumerate(students[:25], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 25
            full_name = student.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            username = student.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            user_id_student = student.get('user_id', '')
            text += f"{i}. **{full_name}**\n"
            text += f"   üë§ @{username} (ID: {user_id_student})\n\n"
        
        if count > 25:
            text += f"... –∏ –µ—â—ë {count - 25} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"students_menu_{group}")]]
    reply_markup = with_home_button(keyboard, group)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def students_delete_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    group = query.data.replace("students_delete_", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    students = db.get_students(group)
    keyboard = []
    for s in students[:25]:
        name = s.get('full_name')
        keyboard.append([InlineKeyboardButton(f"üóë {name[:25]}", callback_data=f"students_delete_pick_{group}_{name}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"students_menu_{group}")])
    reply_markup = with_home_button(keyboard, group)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 25):", reply_markup=reply_markup)

async def students_delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = query.data.split("_", 4)
    group = parts[3]
    # –∏–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è; –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ 4-–≥–æ '_'
    full_name = query.data.split(f"students_delete_pick_{group}_", 1)[1]
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"students_delete_do_{group}_{full_name}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"students_menu_{group}")]
    ]
    reply_markup = with_home_button(keyboard, group)
    await query.edit_message_text(f"–£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{full_name}?", reply_markup=reply_markup)

async def students_delete_do(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = query.data.split("_", 4)
    group = parts[3]
    full_name = query.data.split(f"students_delete_do_{group}_", 1)[1]
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    ok = db.delete_student(group, full_name)
    if ok:
        await query.edit_message_text(f"‚úÖ –£–¥–∞–ª—ë–Ω: {full_name}")
    else:
        await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")

async def students_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    group = query.data.replace("students_edit_", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    students = db.get_students(group)
    keyboard = []
    for s in students[:25]:
        name = s.get('full_name')
        keyboard.append([InlineKeyboardButton(f"‚úèÔ∏è {name[:25]}", callback_data=f"students_edit_pick_{group}_{name}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"students_menu_{group}")])
    reply_markup = with_home_button(keyboard, group)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 25):", reply_markup=reply_markup)

async def students_edit_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = query.data.split("_", 4)
    group = parts[3]
    old_name = query.data.split(f"students_edit_pick_{group}_", 1)[1]
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    clear_conversation_state(context)
    context.user_data['edit_student_group'] = group
    context.user_data['edit_student_old'] = old_name
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –¥–ª—è:\n{old_name}")

async def handle_edit_student_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group = context.user_data.get('edit_student_group')
    old_name = context.user_data.get('edit_student_old')
    if not group or not old_name:
        return False
    new_name = (update.message.text or '').strip()
    if not new_name:
        await update.message.reply_text("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return True
    ok = db.update_student_name(group, old_name, new_name)
    context.user_data.pop('edit_student_group', None)
    context.user_data.pop('edit_student_old', None)
    if ok:
        await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n{old_name}\n‚Üí {new_name}")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
    return True

# --- Polls ---
async def polls_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    group = query.data.replace("polls_menu_", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
        return
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data=f"polls_create_{group}")],
        [InlineKeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π", callback_data=f"polls_results_{group}")]
    ]
    reply_markup = with_home_button(keyboard, group)
    await query.edit_message_text(f"üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {get_group_name(group)}", reply_markup=reply_markup)

async def polls_create_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    group = query.data.replace("polls_create_", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    clear_conversation_state(context)
    context.user_data["poll_group"] = group
    context.user_data["poll_curator"] = user_id
    await query.edit_message_text(
        f"–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {get_group_name(group)}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10):"
    )

async def handle_poll_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    group = context.user_data.get("poll_group")
    curator_id = context.user_data.get("poll_curator")
    if not group or not curator_id:
        return False
    
    duration_text = (update.message.text or "").strip()
    try:
        duration = int(duration_text) if duration_text else 10
        if duration < 1 or duration > 60:
            await update.message.reply_text("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return True
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (1-60) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è 10 –º–∏–Ω—É—Ç:")
        return True
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    old_polls = db.get_group_polls(group, limit=100)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    for old_poll_id, old_poll in old_polls:
        if old_poll_id in db.polls:
            del db.polls[old_poll_id]
    db.save_polls()
    
    # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    poll_id = db.create_poll(group, curator_id, duration)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    users = db.get_group_users(group)
    poll_text = f"üó≥ **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏**\n\n–ì—Ä—É–ø–ø–∞: {get_group_name(group)}\n–í—Ä–µ–º—è: {duration} –º–∏–Ω—É—Ç\n\n–û—Ç–º–µ—Ç—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø –Ω–∞ –º–µ—Å—Ç–µ", callback_data=f"poll_present_{poll_id}")],
        [InlineKeyboardButton("‚ùå –ú–µ–Ω—è –Ω–µ—Ç", callback_data=f"poll_absent_{poll_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    sent_count = 0
    for user_id in users:
        try:
            await context.bot.send_message(chat_id=user_id, text=poll_text, reply_markup=reply_markup, parse_mode='Markdown')
            sent_count += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if context.job_queue:
        context.job_queue.run_once(close_poll_job, when=duration*60, data={"poll_id": poll_id})
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("poll_group", None)
    context.user_data.pop("poll_curator", None)
    
    await update.message.reply_text(
        f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent_count} —Å—Ç—É–¥–µ–Ω—Ç–∞–º\n"
        f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç\n"
        f"üÜî ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {poll_id}"
    )
    return True

async def close_poll_job(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    try:
        poll_id = context.job.data.get("poll_id")
        if poll_id:
            db.close_poll(poll_id)
            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ {poll_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")

async def poll_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("poll_present_"):
        poll_id = query.data.replace("poll_present_", "")
        status = "present"
    elif query.data.startswith("poll_absent_"):
        poll_id = query.data.replace("poll_absent_", "")
        status = "absent"
    else:
        return
    
    user_id = query.from_user.id
    poll = db.get_poll(poll_id)
    
    if not poll or poll.get("status") != "active":
        await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ
    user_group = db.get_user_group(user_id)
    if user_group != poll.get("group"):
        await query.edit_message_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    existing = poll.get("responses", {}).get(str(user_id))
    if existing:
        resp_status = "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç" if existing.get("status") == "present" else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        resp_reason = existing.get("reason", "")
        text = f"üó≥ –í–∞—à –æ—Ç–≤–µ—Ç —É–∂–µ —É—á—Ç—ë–Ω: {resp_status}"
        if resp_reason:
            text += f"\nüí¨ –ü—Ä–∏—á–∏–Ω–∞: {resp_reason}"
        await query.edit_message_text(text)
        return

    if status == "present":
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ
        db.add_poll_response(poll_id, user_id, "present")
        await query.edit_message_text("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: –Ø –Ω–∞ –º–µ—Å—Ç–µ")
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
        context.user_data["poll_absent_id"] = poll_id
        context.user_data["poll_absent_user"] = user_id
        await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:")

async def handle_absence_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è"""
    poll_id = context.user_data.get("poll_absent_id")
    user_id = context.user_data.get("poll_absent_user")
    if not poll_id or not user_id:
        return False
    
    reason = (update.message.text or "").strip()
    if not reason:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:")
        return True
    
    db.add_poll_response(poll_id, user_id, "absent", reason)
    context.user_data.pop("poll_absent_id", None)
    context.user_data.pop("poll_absent_user", None)
    
    await update.message.reply_text(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    return True

async def handle_full_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    if not context.user_data.get('waiting_for_full_name'):
        return False
    
    full_name = (update.message.text or '').strip()
    if not full_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
        return True
    
    group = context.user_data.get('full_name_group')
    username = context.user_data.get('registration_username', 'Unknown')
    user_id = update.effective_user.id
    
    if group:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –§–ò–û
        db.add_user(user_id, username, group)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if str(user_id) in db.users:
            db.users[str(user_id)]['full_name'] = full_name
            db.save_users()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã
        db.add_student(group, user_id, username, full_name)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('waiting_for_full_name', None)
        context.user_data.pop('full_name_group', None)
        context.user_data.pop('registration_username', None)
        
        await update.message.reply_text(
            f"üéâ **–ö—Ä—É—Ç–æ! –¢–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏!** üéâ\n\n"
            f"üë§ **–§–ò–û:** {full_name}\n"
            f"üë• **–ì—Ä—É–ø–ø–∞:** {get_group_name(group)}\n\n"
            f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            f"‚Ä¢ üó≥ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö\n"
            f"‚Ä¢ üìÖ –ü–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            f"‚Ä¢ üì¢ –ß–∏—Ç–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            f"‚Ä¢ ‚ùì –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫—É—Ä–∞—Ç–æ—Ä—É\n\n"
            f"**–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:** ‚¨áÔ∏è"
        )
        await show_main_menu(update, context, group)
    
    return True

async def student_polls_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    group = query.data.replace("student_polls_", "")
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ
    user_group = db.get_user_group(user_id)
    if user_group != group:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    polls = db.get_group_polls(group, limit=1)
    if not polls:
        await query.edit_message_text(f"üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {get_group_name(group)}\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")
        return
    
    poll_id, poll = polls[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    if poll.get("status") != "active":
        await query.edit_message_text(f"üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {get_group_name(group)}\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –≥–æ–ª–æ—Å–æ–≤–∞–ª
    responses = poll.get("responses", {})
    if str(user_id) in responses:
        response = responses[str(user_id)]
        status = "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç" if response.get("status") == "present" else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        reason = response.get("reason", "")
        
        text = f"üó≥ **–í–∞—à –æ—Ç–≤–µ—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏**\n\n"
        text += f"‚úÖ –°—Ç–∞—Ç—É—Å: {status}\n"
        if reason:
            text += f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        text += f"\n–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        
        await query.edit_message_text(text, parse_mode='Markdown')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    poll_text = f"üó≥ **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏**\n\n–ì—Ä—É–ø–ø–∞: {get_group_name(group)}\n\n–û—Ç–º–µ—Ç—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø –Ω–∞ –º–µ—Å—Ç–µ", callback_data=f"poll_present_{poll_id}")],
        [InlineKeyboardButton("‚ùå –ú–µ–Ω—è –Ω–µ—Ç", callback_data=f"poll_absent_{poll_id}")]
    ]
    reply_markup = with_home_button(keyboard, group)
    
    await query.edit_message_text(poll_text, reply_markup=reply_markup, parse_mode='Markdown')

async def polls_results_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    group = query.data.replace("polls_results_", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    polls = db.get_group_polls(group, limit=10)
    if not polls:
        await query.edit_message_text(f"üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {get_group_name(group)}\n\n–ü–æ–∫–∞ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")
        return
    
    keyboard = []
    for poll_id, poll in polls:
        created_at = poll.get("created_at", "")
        status = poll.get("status", "unknown")
        responses_count = len(poll.get("responses", {}))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        try:
            from datetime import datetime
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            date_str = dt.strftime("%d.%m %H:%M")
        except:
            date_str = created_at[:16]
        
        status_emoji = "üü¢" if status == "active" else "üî¥"
        button_text = f"{status_emoji} {date_str} ({responses_count} –æ—Ç–≤–µ—Ç–æ–≤)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"poll_view_{poll_id}")])
    
    reply_markup = with_home_button(keyboard, group)
    await query.edit_message_text(f"üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {get_group_name(group)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=reply_markup)

async def poll_view_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    poll_id = query.data.replace("poll_view_", "")
    
    poll = db.get_poll(poll_id)
    if not poll:
        await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    group = poll.get("group", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    created_at = poll.get("created_at", "")
    try:
        from datetime import datetime
        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        date_str = dt.strftime("%d.%m.%Y %H:%M")
    except:
        date_str = created_at
    
    status = poll.get("status", "unknown")
    duration = poll.get("duration_minutes", 0)
    responses = poll.get("responses", {})
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    present_count = sum(1 for r in responses.values() if r.get("status") == "present")
    absent_count = sum(1 for r in responses.values() if r.get("status") == "absent")
    total_responses = len(responses)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    students = db.get_group_students_data(group)
    total_students = len(students)
    not_responded = total_students - total_responses
    
    status_emoji = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if status == "active" else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
    
    text = f"üó≥ **–î–µ—Ç–∞–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è**\n\n"
    text += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
    text += f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç\n"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji}\n\n"
    text += f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    text += f"‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {present_count}\n"
    text += f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {absent_count}\n"
    text += f"‚ùì –ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {not_responded}\n"
    text += f"üë• –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {total_students}\n\n"
    
    if responses:
        text += "**–û—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:**\n"
        for user_id_str, response in responses.items():
            try:
                user_id_int = int(user_id_str)
                user_info = db.users.get(user_id_str, {})
                username = user_info.get("username", f"ID{user_id_int}")
                
                # –ò—â–µ–º –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã
                full_name = ""
                students = db.get_group_students_data(group)
                for student in students:
                    if student.get("username") == username:
                        full_name = student.get("full_name", "")
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ username, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ user_id
                if not full_name:
                    for student in students:
                        if str(student.get("user_id", "")) == user_id_str:
                            full_name = student.get("full_name", "")
                            break
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
                display_name = full_name if full_name else f"@{username}"
                
                status_emoji = "‚úÖ" if response.get("status") == "present" else "‚ùå"
                reason = response.get("reason", "")
                timestamp = response.get("timestamp", "")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                try:
                    resp_dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    time_str = resp_dt.strftime("%H:%M")
                except:
                    time_str = timestamp[:5]
                
                text += f"{status_emoji} {display_name} ({time_str})"
                if reason:
                    text += f"\n   üí¨ {reason}"
                text += "\n"
            except:
                continue
    
    keyboard = [
        [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data=f"poll_export_{poll_id}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π", callback_data=f"polls_results_{group}")]
    ]
    reply_markup = with_home_button(keyboard, group)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def poll_export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ CSV"""
    query = update.callback_query
    await query.answer()
    poll_id = query.data.replace("poll_export_", "")
    
    poll = db.get_poll(poll_id)
    if not poll:
        await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    group = poll.get("group", "")
    user_id = query.from_user.id
    if not db.is_curator(user_id, group):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º CSV
    import csv
    import io
    
    output = io.StringIO()
    writer = csv.writer(output)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow(["–§–ò–û", "Username", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è", "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
    students = db.get_group_students_data(group)
    responses = poll.get("responses", {})
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ user_id
    responses_by_user_id = {}
    for user_id_str, response in responses.items():
        responses_by_user_id[user_id_str] = response
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for student in students:
        full_name = student.get("full_name", "")
        username = student.get("username", "")
        student_user_id = str(student.get("user_id", ""))
        
        if student_user_id in responses_by_user_id:
            response = responses_by_user_id[student_user_id]
            status = "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç" if response.get("status") == "present" else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            reason = response.get("reason", "")
            timestamp = response.get("timestamp", "")
        else:
            status = "–ù–µ –æ—Ç–≤–µ—Ç–∏–ª"
            reason = ""
            timestamp = ""
        
        writer.writerow([full_name, username, status, reason, timestamp])
    
    csv_content = output.getvalue()
    output.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    filename = f"poll_{poll_id}_{group}.csv"
    file_obj = io.BytesIO(csv_content.encode('utf-8-sig'))  # BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
    
    try:
        await context.bot.send_document(
            chat_id=user_id,
            document=file_obj,
            filename=filename,
            caption=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è {poll_id}\n–ì—Ä—É–ø–ø–∞: {get_group_name(group)}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ CSV: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")

# === ADMIN FUNCTIONS ===

async def admin_faculties(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    faculties = load_faculties()
    
    text = "üèõ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏**\n\n"
    for faculty_id, faculty_data in faculties.items():
        text += f"**{faculty_data['name']}** ({faculty_id})\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {faculty_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", callback_data="admin_add_faculty")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    groups = load_groups()
    faculties = load_faculties()
    
    text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏**\n\n"
    for group_id, group_data in groups.items():
        faculty_id = group_data.get("faculty", "")
        faculty_name = faculties.get(faculty_id, {}).get("name", faculty_id)
        text += f"**{group_data['name']}** ({group_id})\n"
        text += f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty_name}\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {group_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="admin_add_group")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_change_student_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    users = db.get_all_users()
    groups = load_groups()
    
    text = "üîÑ **–°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞**\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã:\n\n"
    
    keyboard = []
    for user_id_str, user_data in users.items():
        if not user_data.get("is_curator", False):  # –¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã
            username = user_data.get("username", "Unknown")
            group_id = user_data.get("group", "Unknown")
            group_name = groups.get(group_id, {}).get("name", group_id)
            full_name = user_data.get("full_name", "")
            
            display_name = full_name if full_name else f"@{username}"
            keyboard.append([InlineKeyboardButton(
                f"{display_name} ({group_name})", 
                callback_data=f"admin_change_group_select_{user_id_str}"
            )])
    
    if not keyboard:
        text += "–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    else:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_change_group_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    student_id = query.data.replace("admin_change_group_select_", "")
    student_data = db.users.get(student_id)
    
    if not student_data:
        await query.edit_message_text("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    groups = load_groups()
    current_group = student_data.get("group", "")
    current_group_name = groups.get(current_group, {}).get("name", current_group)
    
    text = f"üîÑ **–°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞**\n\n"
    full_name = student_data.get('full_name', '')
    username = student_data.get('username', 'Unknown')
    display_name = full_name if full_name else f'@{username}'
    text += f"**–°—Ç—É–¥–µ–Ω—Ç:** {display_name}\n"
    text += f"**–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞:** {current_group_name}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:"
    
    keyboard = []
    for group_id, group_data in groups.items():
        if group_id != current_group:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
            keyboard.append([InlineKeyboardButton(
                group_data["name"], 
                callback_data=f"admin_change_group_confirm_{student_id}_{group_id}"
            )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_change_student_group")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_change_group_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    parts = query.data.replace("admin_change_group_confirm_", "").split("_")
    student_id = parts[0]
    new_group = parts[1]
    
    student_data = db.users.get(student_id)
    if not student_data:
        await query.edit_message_text("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    groups = load_groups()
    old_group = student_data.get("group", "")
    old_group_name = groups.get(old_group, {}).get("name", old_group)
    new_group_name = groups.get(new_group, {}).get("name", new_group)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞
    db.users[student_id]["group"] = new_group
    db.save_users()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    if old_group in db.students:
        students = db.students[old_group]
        for i, student in enumerate(students):
            if str(student.get("user_id")) == student_id:
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                student_copy = student.copy()
                del students[i]
                db.save_students()
                
                if new_group not in db.students:
                    db.students[new_group] = []
                db.students[new_group].append(student_copy)
                db.save_students()
                break
    
    text = f"‚úÖ **–ì—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!**\n\n"
    full_name = student_data.get('full_name', '')
    username = student_data.get('username', 'Unknown')
    display_name = full_name if full_name else f'@{username}'
    text += f"**–°—Ç—É–¥–µ–Ω—Ç:** {display_name}\n"
    text += f"**–°—Ç–∞—Ä–∞—è –≥—Ä—É–ø–ø–∞:** {old_group_name}\n"
    text += f"**–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞:** {new_group_name}\n\n"
    text += "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –µ—â–µ", callback_data="admin_change_student_group")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_curators(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    curators = load_curators()
    groups = load_groups()
    
    text = "üë®‚Äçüè´ **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤**\n\n"
    for group_id, curator_ids in curators.items():
        group_name = groups.get(group_id, {}).get("name", group_id)
        text += f"**{group_name}** ({group_id}):\n"
        if curator_ids:
            for curator_id in curator_ids:
                text += f"  ‚Ä¢ ID: {curator_id}\n"
        else:
            text += "  ‚Ä¢ –ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
        text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_assign_curator")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    users = db.get_all_users()
    students = db.get_all_students()
    messages = db.get_all_messages()
    questions = db.get_all_questions()
    polls = db.get_all_polls()
    groups = load_groups()
    faculties = load_faculties()
    
    text = "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    text += f"üèõ **–§–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤:** {len(faculties)}\n"
    text += f"üë• **–ì—Ä—É–ø–ø:** {len(groups)}\n"
    text += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users)}\n"
    text += f"üéì **–°—Ç—É–¥–µ–Ω—Ç–æ–≤:** {sum(len(group_students) for group_students in students.values())}\n"
    text += f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–π:** {sum(len(group_messages) for group_messages in messages.values())}\n"
    text += f"‚ùì **–í–æ–ø—Ä–æ—Å–æ–≤:** {sum(len(group_questions) for group_questions in questions.values())}\n"
    text += f"üó≥ **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:** {len(polls)}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
    text += "**–ü–æ –≥—Ä—É–ø–ø–∞–º:**\n"
    for group_id, group_data in groups.items():
        group_name = group_data.get("name", group_id)
        group_users = len([u for u in users.values() if u.get("group") == group_id])
        group_students = len(students.get(group_id, []))
        group_messages = len(messages.get(group_id, []))
        group_questions = len(questions.get(group_id, []))
        
        text += f"**{group_name}:** {group_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {group_students} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, {group_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, {group_questions} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    users = db.get_all_users()
    groups = load_groups()
    
    text = "üë§ **–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n"
    
    for user_id_str, user_data in users.items():
        username = user_data.get("username", "Unknown")
        group_id = user_data.get("group", "Unknown")
        group_name = groups.get(group_id, {}).get("name", group_id)
        is_curator = user_data.get("is_curator", False)
        
        text += f"**ID:** {user_id_str}\n"
        text += f"**Username:** @{username}\n"
        text += f"**–ì—Ä—É–ø–ø–∞:** {group_name}\n"
        text += f"**–ö—É—Ä–∞—Ç–æ—Ä:** {'–î–∞' if is_curator else '–ù–µ—Ç'}\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    questions = db.get_all_questions()
    groups = load_groups()
    
    text = "‚ùì **–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
    
    for group_id, group_questions in questions.items():
        group_name = groups.get(group_id, {}).get("name", group_id)
        text += f"**{group_name}:**\n"
        
        for question in group_questions:
            status = question.get("status", "pending")
            text += f"  ‚Ä¢ {question.get('question', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')} ({status})\n"
        text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    messages = db.get_all_messages()
    groups = load_groups()
    
    text = "üì¢ **–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
    
    for group_id, group_messages in messages.items():
        group_name = groups.get(group_id, {}).get("name", group_id)
        text += f"**{group_name}:** {len(group_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    await show_group_selection(update, context)

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç: –§–ò–û -> —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ -> –∏–º–ø–æ—Ä—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ -> –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è -> –ø—Ä–æ—á–µ–µ"""
    handled = await handle_full_name_input(update, context)
    if handled:
        return
    handled = await handle_edit_student_text(update, context)
    if handled:
        return
    handled = await handle_import_students_text(update, context)
    if handled:
        return
    handled = await handle_poll_duration(update, context)
    if handled:
        return
    handled = await handle_absence_reason(update, context)
    if handled:
        return
    await handle_message(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –∏ –ø—É–ª–∏–Ω–≥ –¥–ª—è Render
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .read_timeout(30)
        .write_timeout(30)
        .connect_timeout(30)
        .pool_timeout(30)
        .build()
    )
    
    # Keepalive –¥–ª—è Render free (–Ω–µ –¥–∞—ë–º —Å–µ—Ä–≤–∏—Å—É –∑–∞—Å–Ω—É—Ç—å)
    async def keepalive_job(context: ContextTypes.DEFAULT_TYPE):
        try:
            url = os.getenv('KEEPALIVE_URL') or os.getenv('RENDER_EXTERNAL_URL')
            if not url:
                return
            if not url.startswith('http'):
                url = f"https://{url}"
            async with httpx.AsyncClient(timeout=10) as client:
                await client.get(url)
        except Exception:
            pass

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(on_error)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("today", today_schedule))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("resume", resume))
    application.add_handler(CommandHandler("import_students", import_students_cmd))
    application.add_handler(CommandHandler("students", students_cmd))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(handle_group_selection, pattern="^join_"))
    application.add_handler(CallbackQueryHandler(handle_schedule, pattern="^schedule_"))
    application.add_handler(CallbackQueryHandler(handle_announcement, pattern="^announce_"))
    application.add_handler(CallbackQueryHandler(show_stats, pattern="^stats_"))
    application.add_handler(CallbackQueryHandler(change_group, pattern="^change_group$"))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu_"))
    application.add_handler(CallbackQueryHandler(handle_webapp, pattern="^webapp_"))
    application.add_handler(CallbackQueryHandler(view_schedule, pattern="^view_schedule_"))
    application.add_handler(CallbackQueryHandler(view_announcements, pattern="^view_announce_"))
    application.add_handler(CallbackQueryHandler(ask_question, pattern="^ask_question_"))
    application.add_handler(CallbackQueryHandler(view_questions, pattern="^view_questions_"))
    application.add_handler(CallbackQueryHandler(answer_question_menu, pattern="^answer_question_"))
    application.add_handler(CallbackQueryHandler(select_question_for_answer, pattern="^select_question_"))
    application.add_handler(CallbackQueryHandler(cancel_question, pattern="^cancel_question_"))
    application.add_handler(CallbackQueryHandler(cancel_answer, pattern="^cancel_answer_"))
    application.add_handler(CallbackQueryHandler(today_schedule, pattern="^today_schedule_"))
    application.add_handler(CallbackQueryHandler(students_menu, pattern="^students_menu_[^_]+$"))
    application.add_handler(CallbackQueryHandler(students_import_start, pattern="^students_import_[^_]+$"))
    application.add_handler(CallbackQueryHandler(students_list, pattern="^students_list_[^_]+$"))
    application.add_handler(CallbackQueryHandler(students_delete_menu, pattern="^students_delete_[^_]+$"))
    application.add_handler(CallbackQueryHandler(students_delete_confirm, pattern="^students_delete_pick_"))
    application.add_handler(CallbackQueryHandler(students_delete_do, pattern="^students_delete_do_"))
    application.add_handler(CallbackQueryHandler(students_edit_menu, pattern="^students_edit_[^_]+$"))
    application.add_handler(CallbackQueryHandler(students_edit_ask, pattern="^students_edit_pick_"))
    
    # Polls handlers
    application.add_handler(CallbackQueryHandler(polls_menu, pattern="^polls_menu_[^_]+$"))
    application.add_handler(CallbackQueryHandler(polls_create_start, pattern="^polls_create_[^_]+$"))
    application.add_handler(CallbackQueryHandler(polls_results_menu, pattern="^polls_results_[^_]+$"))
    application.add_handler(CallbackQueryHandler(poll_view_details, pattern="^poll_view_"))
    application.add_handler(CallbackQueryHandler(poll_export_csv, pattern="^poll_export_"))
    application.add_handler(CallbackQueryHandler(student_polls_menu, pattern="^student_polls_[^_]+$"))
    application.add_handler(CallbackQueryHandler(poll_response, pattern="^poll_(present|absent)_"))
    
    # Admin handlers
    application.add_handler(CallbackQueryHandler(show_admin_panel, pattern="^admin_panel$"))
    application.add_handler(CallbackQueryHandler(admin_faculties, pattern="^admin_faculties$"))
    application.add_handler(CallbackQueryHandler(admin_groups, pattern="^admin_groups$"))
    application.add_handler(CallbackQueryHandler(admin_curators, pattern="^admin_curators$"))
    application.add_handler(CallbackQueryHandler(admin_change_student_group, pattern="^admin_change_student_group$"))
    application.add_handler(CallbackQueryHandler(admin_change_group_select, pattern="^admin_change_group_select_"))
    application.add_handler(CallbackQueryHandler(admin_change_group_confirm, pattern="^admin_change_group_confirm_"))
    application.add_handler(CallbackQueryHandler(admin_stats, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(admin_users, pattern="^admin_users$"))
    application.add_handler(CallbackQueryHandler(admin_questions, pattern="^admin_questions$"))
    application.add_handler(CallbackQueryHandler(admin_messages, pattern="^admin_messages$"))
    application.add_handler(CallbackQueryHandler(admin_main_menu, pattern="^admin_main_menu$"))
    
    application.add_handler(MessageHandler((filters.PHOTO | filters.Document.ALL) & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º keepalive –ø–∏–Ω–≥–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    if application.job_queue:
        application.job_queue.run_repeating(keepalive_job, interval=600, first=30)
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # –î–ª—è Render Web Service - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
    import os
    port = int(os.environ.get('PORT', 8080))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    import asyncio
    import threading
    from http.server import HTTPServer, BaseHTTPRequestHandler
    
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Bot is running')
        
        def log_message(self, format, *args):
            pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_server():
        server = HTTPServer(('0.0.0.0', port), Handler)
        server.serve_forever()
    
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    main()
