#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
"""

import asyncio
import sys
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CallbackQueryHandler, ContextTypes

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from webapp_config import get_webapp_url, get_webapp_info

async def test_webapp_button():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –∏ WebAppInfo
        url = get_webapp_url("main")
        webapp_info = get_webapp_info()
        
        print(f"‚úÖ URL: {url}")
        print(f"‚úÖ WebAppInfo: {type(webapp_info)}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        keyboard = [
            [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webapp_info)],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üì± –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å: {url}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_bot_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –±–æ—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–æ—Ç–∞...")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –±–æ—Ç–∞
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
        from telegram.ext import Application, CallbackQueryHandler, ContextTypes
        from webapp_config import get_webapp_url, get_webapp_info
        
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_webapp_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    files_to_check = [
        'webapp/enhanced.html',
        'webapp/enhanced-styles.css',
        'webapp/enhanced-app.js',
        'webapp/server.py'
    ]
    
    all_exist = True
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_exist = False
    
    return all_exist

async def main():
    print("üöÄ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –±–æ—Ç–∞", test_bot_imports()),
        ("–§–∞–π–ª—ã –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", test_webapp_files()),
        ("–ö–Ω–æ–ø–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", test_webapp_button())
    ]
    
    results = []
    for test_name, test_coro in tests:
        if asyncio.iscoroutine(test_coro):
            result = await test_coro
        else:
            result = test_coro
        results.append((test_name, result))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 50)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<30} {status}")
        if not result:
            all_passed = False
    
    print("=" * 50)
    
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:")
        print("1. üåê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Å—Ç–∏–Ω–≥ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("2. üîß –û–±–Ω–æ–≤–∏—Ç–µ WEBAPP_BASE_URL –≤ webapp_config.py")
        print("3. ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python bot.py")
        print("4. üì± –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram")
        print("\nüí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok: https://ngrok.com/download")
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ngrok http 8080")
        print("   - –û–±–Ω–æ–≤–∏—Ç–µ URL –≤ webapp_config.py")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
    
    return all_passed

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
