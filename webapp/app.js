// Telegram Web App Integration
const tg = (window.Telegram && window.Telegram.WebApp) || {
    ready: function() {},
    expand: function() {},
    initDataUnsafe: {},
    showAlert: function(msg) { alert(msg); },
    BackButton: {
        show: function() {},
        hide: function() {},
        onClick: function() {}
    },
    onEvent: function() {}
};

// Global state
let currentUser = null;
let currentGroup = null;
let isCurator = false;
let fabMenuOpen = false;
let apiBaseUrl = null; // –û—Ç–∫–ª—é—á–∞–µ–º API –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞

// Initialize the app
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    try {
        // Show loading screen
        showLoadingScreen();
        
        // Initialize Telegram Web App (safe)
        try {
            tg.ready();
            tg.expand();
        } catch (e) {
            console.log('Telegram WebApp not available, using demo mode');
        }
        
        // Get user data from Telegram or use demo data
        const user = tg.initDataUnsafe && tg.initDataUnsafe.user;
        if (user && user.id) {
            currentUser = user;
            updateUserInfo(user);
        } else {
            // Demo data for testing
            currentUser = {
                id: 123456789,
                first_name: "–¢–µ—Å—Ç",
                last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            };
            currentGroup = "–∂1";
            isCurator = false;
            updateUserInfo(currentUser);
        }
        
        // Initialize tabs first
        initializeTabs();
        
        // Hide loading screen and show app
        setTimeout(() => {
            hideLoadingScreen();
        }, 500);
        
        // Load initial data
        setTimeout(() => {
            loadInitialData();
        }, 600);
        
        // Show FAB for curators
        if (isCurator) {
            setTimeout(() => {
                showFab();
            }, 700);
        }
        
    } catch (error) {
        console.error('Error initializing app:', error);
        // Force show app even if there's an error
        hideLoadingScreen();
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

function showLoadingScreen() {
    document.getElementById('loading-screen').style.display = 'flex';
    document.getElementById('app').style.display = 'none';
}

function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    const app = document.getElementById('app');
    
    loadingScreen.style.opacity = '0';
    setTimeout(() => {
        loadingScreen.style.display = 'none';
        app.style.display = 'flex';
    }, 500);
}

function updateUserInfo(user) {
    const userName = document.getElementById('user-name');
    const userGroup = document.getElementById('user-group');
    
    if (userName) {
        userName.textContent = user.first_name + (user.last_name ? ' ' + user.last_name : '');
    }
    
    if (userGroup) {
        userGroup.textContent = '–ì—Ä—É–ø–ø–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...';
    }
}

function initializeTabs() {
    const tabs = document.querySelectorAll('.nav-tab');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const targetTab = tab.getAttribute('data-tab');
            
            // Remove active class from all tabs and contents
            tabs.forEach(t => t.classList.remove('active'));
            tabContents.forEach(tc => tc.classList.remove('active'));
            
            // Add active class to clicked tab and corresponding content
            tab.classList.add('active');
            document.getElementById(targetTab + '-tab').classList.add('active');
            
            // Load content for the active tab
            loadTabContent(targetTab);
        });
    });
}

async function loadInitialData() {
    try {
        // Always load demo data for now
        loadDemoData();
    } catch (error) {
        console.error('Error loading initial data:', error);
        // Force load demo data
        loadDemoData();
    }
}

function loadDemoData() {
    // Load demo data for testing
    loadScheduleDemo();
    loadAnnouncementsDemo();
    loadPollsDemo();
    loadQuestionsDemo();
}

async function loadTabContent(tabName) {
    switch(tabName) {
        case 'schedule':
            await loadSchedule();
            break;
        case 'announcements':
            await loadAnnouncements();
            break;
        case 'polls':
            await loadPolls();
            break;
        case 'questions':
            await loadQuestions();
            break;
    }
}

// Schedule functions
async function loadSchedule() {
    // Always use demo data for now
    loadScheduleDemo();
}

function loadScheduleDemo() {
    const content = document.getElementById('schedule-content');
    content.innerHTML = `
        <div class="content-card">
            <div class="card-header">
                <div class="card-title">üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</div>
                <div class="card-time">–°–µ–≥–æ–¥–Ω—è, 10:30</div>
            </div>
            <div class="card-content">
                <p><strong>1 –ø–∞—Ä–∞:</strong> –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (9:00-10:30)</p>
                <p><strong>2 –ø–∞—Ä–∞:</strong> –§–∏–∑–∏–∫–∞ (10:45-12:15)</p>
                <p><strong>3 –ø–∞—Ä–∞:</strong> –•–∏–º–∏—è (13:00-14:30)</p>
                <p><strong>4 –ø–∞—Ä–∞:</strong> –ë–∏–æ–ª–æ–≥–∏—è (14:45-16:15)</p>
            </div>
        </div>
        <div class="content-card">
            <div class="card-header">
                <div class="card-title">üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</div>
                <div class="card-time">–ó–∞–≤—Ç—Ä–∞, 09:00</div>
            </div>
            <div class="card-content">
                <p><strong>1 –ø–∞—Ä–∞:</strong> –ò—Å—Ç–æ—Ä–∏—è (9:00-10:30)</p>
                <p><strong>2 –ø–∞—Ä–∞:</strong> –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ (10:45-12:15)</p>
                <p><strong>3 –ø–∞—Ä–∞:</strong> –ì–µ–æ–≥—Ä–∞—Ñ–∏—è (13:00-14:30)</p>
            </div>
        </div>
    `;
}

async function refreshSchedule() {
    const refreshBtn = document.querySelector('[onclick="refreshSchedule()"]');
    const icon = refreshBtn.querySelector('.refresh-icon');
    
    icon.style.transform = 'rotate(360deg)';
    await loadSchedule();
    
    setTimeout(() => {
        icon.style.transform = 'rotate(0deg)';
    }, 500);
}

// Announcements functions
async function loadAnnouncements() {
    // Always use demo data for now
    loadAnnouncementsDemo();
}

function loadAnnouncementsDemo() {
    const content = document.getElementById('announcements-content');
    content.innerHTML = `
        <div class="content-card">
            <div class="card-header">
                <div class="card-title">üì¢ –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</div>
                <div class="card-time">–°–µ–≥–æ–¥–Ω—è, 14:20</div>
            </div>
            <div class="card-content">
                <p>–ó–∞–≤—Ç—Ä–∞ –≤ 10:00 —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Å–æ–±—Ä–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!</p>
            </div>
        </div>
        <div class="content-card">
            <div class="card-header">
                <div class="card-title">üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</div>
                <div class="card-time">–í—á–µ—Ä–∞, 16:45</div>
            </div>
            <div class="card-content">
                <p>–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–æ –ø—è—Ç–Ω–∏—Ü—ã.</p>
            </div>
        </div>
    `;
}

async function refreshAnnouncements() {
    const refreshBtn = document.querySelector('[onclick="refreshAnnouncements()"]');
    const icon = refreshBtn.querySelector('.refresh-icon');
    
    icon.style.transform = 'rotate(360deg)';
    await loadAnnouncements();
    
    setTimeout(() => {
        icon.style.transform = 'rotate(0deg)';
    }, 500);
}

// Polls functions
async function loadPolls() {
    // Always use demo data for now
    loadPollsDemo();
}

function loadPollsDemo() {
    const content = document.getElementById('polls-content');
    content.innerHTML = `
        <div class="poll-card">
            <div class="poll-header">
                <div class="poll-title">üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏</div>
                <div class="poll-status active">–ê–∫—Ç–∏–≤–Ω–æ</div>
            </div>
            <div class="poll-options">
                <div class="poll-option">
                    <input type="radio" id="present" name="attendance" value="present">
                    <label for="present">‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é</label>
                </div>
                <div class="poll-option">
                    <input type="radio" id="absent" name="attendance" value="absent">
                    <label for="absent">‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é</label>
                </div>
                <div class="poll-option">
                    <input type="radio" id="late" name="attendance" value="late">
                    <label for="late">‚è∞ –û–ø–æ–∑–¥–∞—é</label>
                </div>
            </div>
            <button class="poll-button" onclick="submitPoll()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
        </div>
        <div class="poll-card">
            <div class="poll-header">
                <div class="poll-title">üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —ç–∫—Å–∫—É—Ä—Å–∏–∏</div>
                <div class="poll-status ended">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
            </div>
            <div class="card-content">
                <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</p>
                <p>‚úÖ –ó–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é: 15 –≥–æ–ª–æ—Å–æ–≤</p>
                <p>‚ùå –ü—Ä–æ—Ç–∏–≤ —ç–∫—Å–∫—É—Ä—Å–∏–∏: 3 –≥–æ–ª–æ—Å–∞</p>
            </div>
        </div>
    `;
}

function createPollHTML(poll) {
    if (poll.status === 'active') {
        return `
            <div class="poll-card">
                <div class="poll-header">
                    <div class="poll-title">üó≥ ${poll.title}</div>
                    <div class="poll-status active">–ê–∫—Ç–∏–≤–Ω–æ</div>
                </div>
                <div class="poll-options">
                    <div class="poll-option">
                        <input type="radio" id="present_${poll.id}" name="attendance_${poll.id}" value="present">
                        <label for="present_${poll.id}">‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é</label>
                    </div>
                    <div class="poll-option">
                        <input type="radio" id="absent_${poll.id}" name="attendance_${poll.id}" value="absent">
                        <label for="absent_${poll.id}">‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é</label>
                    </div>
                    <div class="poll-option">
                        <input type="radio" id="late_${poll.id}" name="attendance_${poll.id}" value="late">
                        <label for="late_${poll.id}">‚è∞ –û–ø–æ–∑–¥–∞—é</label>
                    </div>
                </div>
                <button class="poll-button" onclick="submitPollVote(${poll.id})">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
            </div>
        `;
    } else {
        return `
            <div class="poll-card">
                <div class="poll-header">
                    <div class="poll-title">üó≥ ${poll.title}</div>
                    <div class="poll-status ended">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                </div>
                <div class="card-content">
                    <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</p>
                    <p>‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${poll.results.present} –≥–æ–ª–æ—Å–æ–≤</p>
                    <p>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${poll.results.absent} –≥–æ–ª–æ—Å–æ–≤</p>
                    <p>‚è∞ –û–ø–æ–∑–¥–∞—é—Ç: ${poll.results.late} –≥–æ–ª–æ—Å–æ–≤</p>
                </div>
            </div>
        `;
    }
}

async function refreshPolls() {
    const refreshBtn = document.querySelector('[onclick="refreshPolls()"]');
    const icon = refreshBtn.querySelector('.refresh-icon');
    
    icon.style.transform = 'rotate(360deg)';
    await loadPolls();
    
    setTimeout(() => {
        icon.style.transform = 'rotate(0deg)';
    }, 500);
}

function submitPoll() {
    const selectedOption = document.querySelector('input[name="attendance"]:checked');
    if (selectedOption) {
        showSuccess('–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        selectedOption.checked = false;
    } else {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞');
    }
}

function submitPollVote(pollId) {
    const selectedOption = document.querySelector(`input[name="attendance_${pollId}"]:checked`);
    if (selectedOption) {
        showSuccess('–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!');
        selectedOption.checked = false;
    } else {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞');
    }
}

// Questions functions
async function loadQuestions() {
    // Always use demo data for now
    loadQuestionsDemo();
}

function loadQuestionsDemo() {
    const content = document.getElementById('questions-content');
    
    if (isCurator) {
        content.innerHTML = `
            <div class="content-card">
                <div class="card-header">
                    <div class="card-title">‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞</div>
                    <div class="card-time">–°–µ–≥–æ–¥–Ω—è, 12:15</div>
                </div>
                <div class="card-content">
                    <p><strong>–°—Ç—É–¥–µ–Ω—Ç:</strong> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω</p>
                    <p><strong>–í–æ–ø—Ä–æ—Å:</strong> –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç —ç–∫–∑–∞–º–µ–Ω –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?</p>
                    <div style="margin-top: 12px;">
                        <button class="form-button" onclick="answerQuestion(1)">–û—Ç–≤–µ—Ç–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `;
    } else {
        content.innerHTML = `
            <div class="content-card">
                <div class="card-header">
                    <div class="card-title">‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</div>
                </div>
                <div class="card-content">
                    <div class="form-group">
                        <textarea class="form-textarea" id="question-text" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."></textarea>
                    </div>
                    <button class="form-button" onclick="submitQuestion()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å</button>
                </div>
            </div>
        `;
    }
}

function createQuestionHTML(question) {
    if (isCurator && !question.answered) {
        return `
            <div class="content-card">
                <div class="card-header">
                    <div class="card-title">‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞</div>
                    <div class="card-time">${question.time}</div>
                </div>
                <div class="card-content">
                    <p><strong>–°—Ç—É–¥–µ–Ω—Ç:</strong> ${question.student_name}</p>
                    <p><strong>–í–æ–ø—Ä–æ—Å:</strong> ${question.question}</p>
                    <div style="margin-top: 12px;">
                        <button class="form-button" onclick="answerQuestion(${question.id})">–û—Ç–≤–µ—Ç–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `;
    } else if (!isCurator) {
        return `
            <div class="content-card">
                <div class="card-header">
                    <div class="card-title">‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å</div>
                    <div class="card-time">${question.time}</div>
                </div>
                <div class="card-content">
                    <p><strong>–í–æ–ø—Ä–æ—Å:</strong> ${question.question}</p>
                    ${question.answered ? `<p><strong>–û—Ç–≤–µ—Ç:</strong> ${question.answer}</p>` : '<p><em>–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞...</em></p>'}
                </div>
            </div>
        `;
    }
    return '';
}

async function refreshQuestions() {
    const refreshBtn = document.querySelector('[onclick="refreshQuestions()"]');
    const icon = refreshBtn.querySelector('.refresh-icon');
    
    icon.style.transform = 'rotate(360deg)';
    await loadQuestions();
    
    setTimeout(() => {
        icon.style.transform = 'rotate(0deg)';
    }, 500);
}

function submitQuestion() {
    const questionText = document.getElementById('question-text').value.trim();
    if (questionText) {
        showSuccess('–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É!');
        document.getElementById('question-text').value = '';
    } else {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å');
    }
}

function answerQuestion(questionId) {
    openModal('–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', `
        <div class="form-group">
            <label class="form-label">–í–∞—à –æ—Ç–≤–µ—Ç:</label>
            <textarea class="form-textarea" id="answer-text" placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç..."></textarea>
        </div>
        <button class="form-button" onclick="submitAnswer(${questionId})">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
    `);
}

function submitAnswer(questionId) {
    const answerText = document.getElementById('answer-text').value.trim();
    if (answerText) {
        showSuccess('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—É!');
        closeModal();
    } else {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç');
    }
}

// FAB (Floating Action Button) functions
function showFab() {
    document.getElementById('fab-container').style.display = 'block';
}

function toggleFabMenu() {
    const fabMenu = document.querySelector('.fab-menu');
    const fab = document.querySelector('.fab');
    
    fabMenuOpen = !fabMenuOpen;
    
    if (fabMenuOpen) {
        fabMenu.classList.add('active');
        fab.style.transform = 'rotate(45deg)';
    } else {
        fabMenu.classList.remove('active');
        fab.style.transform = 'rotate(0deg)';
    }
}

// Modal functions
function openModal(title, content) {
    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modal-title');
    const modalForm = document.getElementById('modal-form');
    
    modalTitle.textContent = title;
    modalForm.innerHTML = content;
    modal.style.display = 'flex';
    
    setTimeout(() => {
        modal.classList.add('active');
    }, 10);
}

function closeModal() {
    const modal = document.getElementById('modal');
    modal.classList.remove('active');
    
    setTimeout(() => {
        modal.style.display = 'none';
    }, 300);
}

// Form functions for curators
function openScheduleForm() {
    closeFabMenu();
    openModal('üìÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', `
        <div class="form-group">
            <label class="form-label">–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</label>
            <textarea class="form-textarea" id="schedule-text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..."></textarea>
        </div>
        <button class="form-button" onclick="submitSchedule()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</button>
    `);
}

function openAnnouncementForm() {
    closeFabMenu();
    openModal('üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', `
        <div class="form-group">
            <label class="form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
            <input type="text" class="form-input" id="announcement-title" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫...">
        </div>
        <div class="form-group">
            <label class="form-label">–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</label>
            <textarea class="form-textarea" id="announcement-text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è..."></textarea>
        </div>
        <button class="form-button" onclick="submitAnnouncement()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</button>
    `);
}

function openPollForm() {
    closeFabMenu();
    openModal('üó≥ –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', `
        <div class="form-group">
            <label class="form-label">–¢–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</label>
            <input type="text" class="form-input" id="poll-title" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É...">
        </div>
        <div class="form-group">
            <label class="form-label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã):</label>
            <input type="number" class="form-input" id="poll-duration" value="30" min="1" max="1440">
        </div>
        <button class="form-button" onclick="submitPoll()">–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</button>
    `);
}

function submitSchedule() {
    const scheduleText = document.getElementById('schedule-text').value.trim();
    if (scheduleText) {
        showSuccess('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        closeModal();
    } else {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
    }
}

function submitAnnouncement() {
    const title = document.getElementById('announcement-title').value.trim();
    const text = document.getElementById('announcement-text').value.trim();
    
    if (title && text) {
        showSuccess('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        closeModal();
    } else {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    }
}

function submitPoll() {
    const title = document.getElementById('poll-title').value.trim();
    const duration = document.getElementById('poll-duration').value;
    
    if (title && duration) {
        showSuccess('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!');
        closeModal();
    } else {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    }
}

function closeFabMenu() {
    if (fabMenuOpen) {
        toggleFabMenu();
    }
}

// Utility functions
function showSuccess(message) {
    try {
        tg.showAlert(message);
    } catch (e) {
        alert(message);
    }
}

function showError(message) {
    try {
        tg.showAlert(message);
    } catch (e) {
        alert(message);
    }
}

// Close modal when clicking outside
document.addEventListener('click', function(event) {
    const modal = document.getElementById('modal');
    if (event.target === modal) {
        closeModal();
    }
});

// Handle back button (safe)
try {
    tg.onEvent('backButtonClicked', function() {
        if (document.getElementById('modal').style.display === 'flex') {
            closeModal();
        } else if (fabMenuOpen) {
            closeFabMenu();
        } else {
            try {
                tg.close();
            } catch (e) {
                console.log('Cannot close app');
            }
        }
    });
} catch (e) {
    console.log('Back button not available');
}

// Show back button when needed
function showBackButton() {
    try {
        tg.BackButton.show();
    } catch (e) {
        console.log('Back button not available');
    }
}

function hideBackButton() {
    try {
        tg.BackButton.hide();
    } catch (e) {
        console.log('Back button not available');
    }
}

