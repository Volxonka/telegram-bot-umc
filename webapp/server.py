#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ Telegram Web App
–ó–∞–ø—É—Å–∫: python server.py
"""

import http.server
import socketserver
import os
import json
from urllib.parse import urlparse, parse_qs

class WebAppHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=os.path.dirname(os.path.abspath(__file__)), **kwargs)
    
    def do_GET(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
        if self.path == '/' or self.path == '':
            self.path = '/index.html'
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Telegram Web App
        self.send_response(200)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        
        # –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
        return super().do_GET()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.path == '/api/data':
            self.handle_api_request()
        else:
            self.send_error(404)
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def handle_api_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            response_data = {
                "status": "success",
                "data": {
                    "schedule": [
                        {
                            "title": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                            "time": "–°–µ–≥–æ–¥–Ω—è, 10:30",
                            "content": "1 –ø–∞—Ä–∞: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (9:00-10:30)\n2 –ø–∞—Ä–∞: –§–∏–∑–∏–∫–∞ (10:45-12:15)\n3 –ø–∞—Ä–∞: –•–∏–º–∏—è (13:00-14:30)"
                        }
                    ],
                    "announcements": [
                        {
                            "title": "–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                            "time": "–°–µ–≥–æ–¥–Ω—è, 14:20",
                            "content": "–ó–∞–≤—Ç—Ä–∞ –≤ 10:00 —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Å–æ–±—Ä–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!"
                        }
                    ],
                    "polls": [
                        {
                            "id": 1,
                            "title": "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏",
                            "status": "active",
                            "options": ["–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é", "–û–ø–æ–∑–¥–∞—é"]
                        }
                    ],
                    "questions": [
                        {
                            "id": 1,
                            "student": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
                            "question": "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç —ç–∫–∑–∞–º–µ–Ω –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?",
                            "time": "–°–µ–≥–æ–¥–Ω—è, 12:15"
                        }
                    ]
                }
            }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(response_data, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"Server error: {str(e)}")

def run_server(port=None):
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    if port is None:
        port = int(os.environ.get('PORT', 8080))  # –î–ª—è Heroku/Render
    
    with socketserver.TCPServer(("", port), WebAppHandler) as httpd:
        print(f"üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:{port}")
        print(f"üîó –î–ª—è Telegram Web App –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://your-domain.com")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    run_server()
